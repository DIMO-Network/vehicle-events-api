// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DeveloperLicense is an object representing the database table.
type DeveloperLicense struct {
	LicenseAddress    []byte    `boil:"license_address" json:"license_address" toml:"license_address" yaml:"license_address"`
	DeveloperID       string    `boil:"developer_id" json:"developer_id" toml:"developer_id" yaml:"developer_id"`
	Status            string    `boil:"status" json:"status" toml:"status" yaml:"status"`
	CreatedAt         time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt         time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	LicenseAddressHex string    `boil:"license_address_hex" json:"license_address_hex" toml:"license_address_hex" yaml:"license_address_hex"`

	R *developerLicenseR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L developerLicenseL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeveloperLicenseColumns = struct {
	LicenseAddress    string
	DeveloperID       string
	Status            string
	CreatedAt         string
	UpdatedAt         string
	LicenseAddressHex string
}{
	LicenseAddress:    "license_address",
	DeveloperID:       "developer_id",
	Status:            "status",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
	LicenseAddressHex: "license_address_hex",
}

var DeveloperLicenseTableColumns = struct {
	LicenseAddress    string
	DeveloperID       string
	Status            string
	CreatedAt         string
	UpdatedAt         string
	LicenseAddressHex string
}{
	LicenseAddress:    "developer_licenses.license_address",
	DeveloperID:       "developer_licenses.developer_id",
	Status:            "developer_licenses.status",
	CreatedAt:         "developer_licenses.created_at",
	UpdatedAt:         "developer_licenses.updated_at",
	LicenseAddressHex: "developer_licenses.license_address_hex",
}

// Generated where

type whereHelper__byte struct{ field string }

func (w whereHelper__byte) EQ(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelper__byte) NEQ(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelper__byte) LT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelper__byte) LTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelper__byte) GT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelper__byte) GTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var DeveloperLicenseWhere = struct {
	LicenseAddress    whereHelper__byte
	DeveloperID       whereHelperstring
	Status            whereHelperstring
	CreatedAt         whereHelpertime_Time
	UpdatedAt         whereHelpertime_Time
	LicenseAddressHex whereHelperstring
}{
	LicenseAddress:    whereHelper__byte{field: "\"vehicle_events_api\".\"developer_licenses\".\"license_address\""},
	DeveloperID:       whereHelperstring{field: "\"vehicle_events_api\".\"developer_licenses\".\"developer_id\""},
	Status:            whereHelperstring{field: "\"vehicle_events_api\".\"developer_licenses\".\"status\""},
	CreatedAt:         whereHelpertime_Time{field: "\"vehicle_events_api\".\"developer_licenses\".\"created_at\""},
	UpdatedAt:         whereHelpertime_Time{field: "\"vehicle_events_api\".\"developer_licenses\".\"updated_at\""},
	LicenseAddressHex: whereHelperstring{field: "\"vehicle_events_api\".\"developer_licenses\".\"license_address_hex\""},
}

// DeveloperLicenseRels is where relationship names are stored.
var DeveloperLicenseRels = struct {
	DeveloperLicenseAddressEventVehicles string
	DeveloperLicenseAddressEvents        string
}{
	DeveloperLicenseAddressEventVehicles: "DeveloperLicenseAddressEventVehicles",
	DeveloperLicenseAddressEvents:        "DeveloperLicenseAddressEvents",
}

// developerLicenseR is where relationships are stored.
type developerLicenseR struct {
	DeveloperLicenseAddressEventVehicles EventVehicleSlice `boil:"DeveloperLicenseAddressEventVehicles" json:"DeveloperLicenseAddressEventVehicles" toml:"DeveloperLicenseAddressEventVehicles" yaml:"DeveloperLicenseAddressEventVehicles"`
	DeveloperLicenseAddressEvents        EventSlice        `boil:"DeveloperLicenseAddressEvents" json:"DeveloperLicenseAddressEvents" toml:"DeveloperLicenseAddressEvents" yaml:"DeveloperLicenseAddressEvents"`
}

// NewStruct creates a new relationship struct
func (*developerLicenseR) NewStruct() *developerLicenseR {
	return &developerLicenseR{}
}

func (r *developerLicenseR) GetDeveloperLicenseAddressEventVehicles() EventVehicleSlice {
	if r == nil {
		return nil
	}
	return r.DeveloperLicenseAddressEventVehicles
}

func (r *developerLicenseR) GetDeveloperLicenseAddressEvents() EventSlice {
	if r == nil {
		return nil
	}
	return r.DeveloperLicenseAddressEvents
}

// developerLicenseL is where Load methods for each relationship are stored.
type developerLicenseL struct{}

var (
	developerLicenseAllColumns            = []string{"license_address", "developer_id", "status", "created_at", "updated_at", "license_address_hex"}
	developerLicenseColumnsWithoutDefault = []string{"license_address", "developer_id", "status", "license_address_hex"}
	developerLicenseColumnsWithDefault    = []string{"created_at", "updated_at"}
	developerLicensePrimaryKeyColumns     = []string{"license_address"}
	developerLicenseGeneratedColumns      = []string{}
)

type (
	// DeveloperLicenseSlice is an alias for a slice of pointers to DeveloperLicense.
	// This should almost always be used instead of []DeveloperLicense.
	DeveloperLicenseSlice []*DeveloperLicense
	// DeveloperLicenseHook is the signature for custom DeveloperLicense hook methods
	DeveloperLicenseHook func(context.Context, boil.ContextExecutor, *DeveloperLicense) error

	developerLicenseQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	developerLicenseType                 = reflect.TypeOf(&DeveloperLicense{})
	developerLicenseMapping              = queries.MakeStructMapping(developerLicenseType)
	developerLicensePrimaryKeyMapping, _ = queries.BindMapping(developerLicenseType, developerLicenseMapping, developerLicensePrimaryKeyColumns)
	developerLicenseInsertCacheMut       sync.RWMutex
	developerLicenseInsertCache          = make(map[string]insertCache)
	developerLicenseUpdateCacheMut       sync.RWMutex
	developerLicenseUpdateCache          = make(map[string]updateCache)
	developerLicenseUpsertCacheMut       sync.RWMutex
	developerLicenseUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var developerLicenseAfterSelectHooks []DeveloperLicenseHook

var developerLicenseBeforeInsertHooks []DeveloperLicenseHook
var developerLicenseAfterInsertHooks []DeveloperLicenseHook

var developerLicenseBeforeUpdateHooks []DeveloperLicenseHook
var developerLicenseAfterUpdateHooks []DeveloperLicenseHook

var developerLicenseBeforeDeleteHooks []DeveloperLicenseHook
var developerLicenseAfterDeleteHooks []DeveloperLicenseHook

var developerLicenseBeforeUpsertHooks []DeveloperLicenseHook
var developerLicenseAfterUpsertHooks []DeveloperLicenseHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DeveloperLicense) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerLicenseAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DeveloperLicense) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerLicenseBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DeveloperLicense) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerLicenseAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DeveloperLicense) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerLicenseBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DeveloperLicense) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerLicenseAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DeveloperLicense) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerLicenseBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DeveloperLicense) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerLicenseAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DeveloperLicense) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerLicenseBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DeveloperLicense) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range developerLicenseAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDeveloperLicenseHook registers your hook function for all future operations.
func AddDeveloperLicenseHook(hookPoint boil.HookPoint, developerLicenseHook DeveloperLicenseHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		developerLicenseAfterSelectHooks = append(developerLicenseAfterSelectHooks, developerLicenseHook)
	case boil.BeforeInsertHook:
		developerLicenseBeforeInsertHooks = append(developerLicenseBeforeInsertHooks, developerLicenseHook)
	case boil.AfterInsertHook:
		developerLicenseAfterInsertHooks = append(developerLicenseAfterInsertHooks, developerLicenseHook)
	case boil.BeforeUpdateHook:
		developerLicenseBeforeUpdateHooks = append(developerLicenseBeforeUpdateHooks, developerLicenseHook)
	case boil.AfterUpdateHook:
		developerLicenseAfterUpdateHooks = append(developerLicenseAfterUpdateHooks, developerLicenseHook)
	case boil.BeforeDeleteHook:
		developerLicenseBeforeDeleteHooks = append(developerLicenseBeforeDeleteHooks, developerLicenseHook)
	case boil.AfterDeleteHook:
		developerLicenseAfterDeleteHooks = append(developerLicenseAfterDeleteHooks, developerLicenseHook)
	case boil.BeforeUpsertHook:
		developerLicenseBeforeUpsertHooks = append(developerLicenseBeforeUpsertHooks, developerLicenseHook)
	case boil.AfterUpsertHook:
		developerLicenseAfterUpsertHooks = append(developerLicenseAfterUpsertHooks, developerLicenseHook)
	}
}

// One returns a single developerLicense record from the query.
func (q developerLicenseQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DeveloperLicense, error) {
	o := &DeveloperLicense{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for developer_licenses")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DeveloperLicense records from the query.
func (q developerLicenseQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeveloperLicenseSlice, error) {
	var o []*DeveloperLicense

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DeveloperLicense slice")
	}

	if len(developerLicenseAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DeveloperLicense records in the query.
func (q developerLicenseQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count developer_licenses rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q developerLicenseQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if developer_licenses exists")
	}

	return count > 0, nil
}

// DeveloperLicenseAddressEventVehicles retrieves all the event_vehicle's EventVehicles with an executor via developer_license_address column.
func (o *DeveloperLicense) DeveloperLicenseAddressEventVehicles(mods ...qm.QueryMod) eventVehicleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"vehicle_events_api\".\"event_vehicles\".\"developer_license_address\"=?", o.LicenseAddress),
	)

	return EventVehicles(queryMods...)
}

// DeveloperLicenseAddressEvents retrieves all the event's Events with an executor via developer_license_address column.
func (o *DeveloperLicense) DeveloperLicenseAddressEvents(mods ...qm.QueryMod) eventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"vehicle_events_api\".\"events\".\"developer_license_address\"=?", o.LicenseAddress),
	)

	return Events(queryMods...)
}

// LoadDeveloperLicenseAddressEventVehicles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (developerLicenseL) LoadDeveloperLicenseAddressEventVehicles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeveloperLicense interface{}, mods queries.Applicator) error {
	var slice []*DeveloperLicense
	var object *DeveloperLicense

	if singular {
		var ok bool
		object, ok = maybeDeveloperLicense.(*DeveloperLicense)
		if !ok {
			object = new(DeveloperLicense)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDeveloperLicense)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDeveloperLicense))
			}
		}
	} else {
		s, ok := maybeDeveloperLicense.(*[]*DeveloperLicense)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDeveloperLicense)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDeveloperLicense))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &developerLicenseR{}
		}
		args = append(args, object.LicenseAddress)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &developerLicenseR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.LicenseAddress) {
					continue Outer
				}
			}

			args = append(args, obj.LicenseAddress)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`vehicle_events_api.event_vehicles`),
		qm.WhereIn(`vehicle_events_api.event_vehicles.developer_license_address in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load event_vehicles")
	}

	var resultSlice []*EventVehicle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice event_vehicles")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on event_vehicles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for event_vehicles")
	}

	if len(eventVehicleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DeveloperLicenseAddressEventVehicles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &eventVehicleR{}
			}
			foreign.R.DeveloperLicenseAddressDeveloperLicense = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.LicenseAddress, foreign.DeveloperLicenseAddress) {
				local.R.DeveloperLicenseAddressEventVehicles = append(local.R.DeveloperLicenseAddressEventVehicles, foreign)
				if foreign.R == nil {
					foreign.R = &eventVehicleR{}
				}
				foreign.R.DeveloperLicenseAddressDeveloperLicense = local
				break
			}
		}
	}

	return nil
}

// LoadDeveloperLicenseAddressEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (developerLicenseL) LoadDeveloperLicenseAddressEvents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeveloperLicense interface{}, mods queries.Applicator) error {
	var slice []*DeveloperLicense
	var object *DeveloperLicense

	if singular {
		var ok bool
		object, ok = maybeDeveloperLicense.(*DeveloperLicense)
		if !ok {
			object = new(DeveloperLicense)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDeveloperLicense)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDeveloperLicense))
			}
		}
	} else {
		s, ok := maybeDeveloperLicense.(*[]*DeveloperLicense)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDeveloperLicense)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDeveloperLicense))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &developerLicenseR{}
		}
		args = append(args, object.LicenseAddress)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &developerLicenseR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.LicenseAddress) {
					continue Outer
				}
			}

			args = append(args, obj.LicenseAddress)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`vehicle_events_api.events`),
		qm.WhereIn(`vehicle_events_api.events.developer_license_address in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load events")
	}

	var resultSlice []*Event
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for events")
	}

	if len(eventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.DeveloperLicenseAddressEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &eventR{}
			}
			foreign.R.DeveloperLicenseAddressDeveloperLicense = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.LicenseAddress, foreign.DeveloperLicenseAddress) {
				local.R.DeveloperLicenseAddressEvents = append(local.R.DeveloperLicenseAddressEvents, foreign)
				if foreign.R == nil {
					foreign.R = &eventR{}
				}
				foreign.R.DeveloperLicenseAddressDeveloperLicense = local
				break
			}
		}
	}

	return nil
}

// AddDeveloperLicenseAddressEventVehicles adds the given related objects to the existing relationships
// of the developer_license, optionally inserting them as new records.
// Appends related to o.R.DeveloperLicenseAddressEventVehicles.
// Sets related.R.DeveloperLicenseAddressDeveloperLicense appropriately.
func (o *DeveloperLicense) AddDeveloperLicenseAddressEventVehicles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*EventVehicle) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DeveloperLicenseAddress, o.LicenseAddress)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"vehicle_events_api\".\"event_vehicles\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"developer_license_address"}),
				strmangle.WhereClause("\"", "\"", 2, eventVehiclePrimaryKeyColumns),
			)
			values := []interface{}{o.LicenseAddress, rel.VehicleTokenID, rel.EventID, rel.DeveloperLicenseAddress}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DeveloperLicenseAddress, o.LicenseAddress)
		}
	}

	if o.R == nil {
		o.R = &developerLicenseR{
			DeveloperLicenseAddressEventVehicles: related,
		}
	} else {
		o.R.DeveloperLicenseAddressEventVehicles = append(o.R.DeveloperLicenseAddressEventVehicles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &eventVehicleR{
				DeveloperLicenseAddressDeveloperLicense: o,
			}
		} else {
			rel.R.DeveloperLicenseAddressDeveloperLicense = o
		}
	}
	return nil
}

// AddDeveloperLicenseAddressEvents adds the given related objects to the existing relationships
// of the developer_license, optionally inserting them as new records.
// Appends related to o.R.DeveloperLicenseAddressEvents.
// Sets related.R.DeveloperLicenseAddressDeveloperLicense appropriately.
func (o *DeveloperLicense) AddDeveloperLicenseAddressEvents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Event) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.DeveloperLicenseAddress, o.LicenseAddress)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"vehicle_events_api\".\"events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"developer_license_address"}),
				strmangle.WhereClause("\"", "\"", 2, eventPrimaryKeyColumns),
			)
			values := []interface{}{o.LicenseAddress, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.DeveloperLicenseAddress, o.LicenseAddress)
		}
	}

	if o.R == nil {
		o.R = &developerLicenseR{
			DeveloperLicenseAddressEvents: related,
		}
	} else {
		o.R.DeveloperLicenseAddressEvents = append(o.R.DeveloperLicenseAddressEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &eventR{
				DeveloperLicenseAddressDeveloperLicense: o,
			}
		} else {
			rel.R.DeveloperLicenseAddressDeveloperLicense = o
		}
	}
	return nil
}

// DeveloperLicenses retrieves all the records using an executor.
func DeveloperLicenses(mods ...qm.QueryMod) developerLicenseQuery {
	mods = append(mods, qm.From("\"vehicle_events_api\".\"developer_licenses\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"vehicle_events_api\".\"developer_licenses\".*"})
	}

	return developerLicenseQuery{q}
}

// FindDeveloperLicense retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDeveloperLicense(ctx context.Context, exec boil.ContextExecutor, licenseAddress []byte, selectCols ...string) (*DeveloperLicense, error) {
	developerLicenseObj := &DeveloperLicense{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"vehicle_events_api\".\"developer_licenses\" where \"license_address\"=$1", sel,
	)

	q := queries.Raw(query, licenseAddress)

	err := q.Bind(ctx, exec, developerLicenseObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from developer_licenses")
	}

	if err = developerLicenseObj.doAfterSelectHooks(ctx, exec); err != nil {
		return developerLicenseObj, err
	}

	return developerLicenseObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DeveloperLicense) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no developer_licenses provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(developerLicenseColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	developerLicenseInsertCacheMut.RLock()
	cache, cached := developerLicenseInsertCache[key]
	developerLicenseInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			developerLicenseAllColumns,
			developerLicenseColumnsWithDefault,
			developerLicenseColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(developerLicenseType, developerLicenseMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(developerLicenseType, developerLicenseMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"vehicle_events_api\".\"developer_licenses\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"vehicle_events_api\".\"developer_licenses\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into developer_licenses")
	}

	if !cached {
		developerLicenseInsertCacheMut.Lock()
		developerLicenseInsertCache[key] = cache
		developerLicenseInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DeveloperLicense.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DeveloperLicense) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	developerLicenseUpdateCacheMut.RLock()
	cache, cached := developerLicenseUpdateCache[key]
	developerLicenseUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			developerLicenseAllColumns,
			developerLicensePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update developer_licenses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"vehicle_events_api\".\"developer_licenses\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, developerLicensePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(developerLicenseType, developerLicenseMapping, append(wl, developerLicensePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update developer_licenses row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for developer_licenses")
	}

	if !cached {
		developerLicenseUpdateCacheMut.Lock()
		developerLicenseUpdateCache[key] = cache
		developerLicenseUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q developerLicenseQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for developer_licenses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for developer_licenses")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeveloperLicenseSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), developerLicensePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"vehicle_events_api\".\"developer_licenses\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, developerLicensePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in developerLicense slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all developerLicense")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DeveloperLicense) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no developer_licenses provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(developerLicenseColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	developerLicenseUpsertCacheMut.RLock()
	cache, cached := developerLicenseUpsertCache[key]
	developerLicenseUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			developerLicenseAllColumns,
			developerLicenseColumnsWithDefault,
			developerLicenseColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			developerLicenseAllColumns,
			developerLicensePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert developer_licenses, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(developerLicensePrimaryKeyColumns))
			copy(conflict, developerLicensePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"vehicle_events_api\".\"developer_licenses\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(developerLicenseType, developerLicenseMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(developerLicenseType, developerLicenseMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert developer_licenses")
	}

	if !cached {
		developerLicenseUpsertCacheMut.Lock()
		developerLicenseUpsertCache[key] = cache
		developerLicenseUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DeveloperLicense record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DeveloperLicense) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DeveloperLicense provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), developerLicensePrimaryKeyMapping)
	sql := "DELETE FROM \"vehicle_events_api\".\"developer_licenses\" WHERE \"license_address\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from developer_licenses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for developer_licenses")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q developerLicenseQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no developerLicenseQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from developer_licenses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for developer_licenses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeveloperLicenseSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(developerLicenseBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), developerLicensePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"vehicle_events_api\".\"developer_licenses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, developerLicensePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from developerLicense slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for developer_licenses")
	}

	if len(developerLicenseAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DeveloperLicense) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDeveloperLicense(ctx, exec, o.LicenseAddress)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeveloperLicenseSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeveloperLicenseSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), developerLicensePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"vehicle_events_api\".\"developer_licenses\".* FROM \"vehicle_events_api\".\"developer_licenses\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, developerLicensePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DeveloperLicenseSlice")
	}

	*o = slice

	return nil
}

// DeveloperLicenseExists checks if the DeveloperLicense row exists.
func DeveloperLicenseExists(ctx context.Context, exec boil.ContextExecutor, licenseAddress []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"vehicle_events_api\".\"developer_licenses\" where \"license_address\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, licenseAddress)
	}
	row := exec.QueryRowContext(ctx, sql, licenseAddress)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if developer_licenses exists")
	}

	return exists, nil
}

// Exists checks if the DeveloperLicense row exists.
func (o *DeveloperLicense) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DeveloperLicenseExists(ctx, exec, o.LicenseAddress)
}
