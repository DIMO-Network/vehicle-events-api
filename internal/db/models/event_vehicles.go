// Code generated by SQLBoiler 4.19.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// EventVehicle is an object representing the database table.
type EventVehicle struct {
	VehicleTokenID          types.Decimal `boil:"vehicle_token_id" json:"vehicle_token_id" toml:"vehicle_token_id" yaml:"vehicle_token_id"`
	EventID                 string        `boil:"event_id" json:"event_id" toml:"event_id" yaml:"event_id"`
	DeveloperLicenseAddress []byte        `boil:"developer_license_address" json:"developer_license_address" toml:"developer_license_address" yaml:"developer_license_address"`
	CreatedAt               time.Time     `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt               time.Time     `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *eventVehicleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L eventVehicleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EventVehicleColumns = struct {
	VehicleTokenID          string
	EventID                 string
	DeveloperLicenseAddress string
	CreatedAt               string
	UpdatedAt               string
}{
	VehicleTokenID:          "vehicle_token_id",
	EventID:                 "event_id",
	DeveloperLicenseAddress: "developer_license_address",
	CreatedAt:               "created_at",
	UpdatedAt:               "updated_at",
}

var EventVehicleTableColumns = struct {
	VehicleTokenID          string
	EventID                 string
	DeveloperLicenseAddress string
	CreatedAt               string
	UpdatedAt               string
}{
	VehicleTokenID:          "event_vehicles.vehicle_token_id",
	EventID:                 "event_vehicles.event_id",
	DeveloperLicenseAddress: "event_vehicles.developer_license_address",
	CreatedAt:               "event_vehicles.created_at",
	UpdatedAt:               "event_vehicles.updated_at",
}

// Generated where

var EventVehicleWhere = struct {
	VehicleTokenID          whereHelpertypes_Decimal
	EventID                 whereHelperstring
	DeveloperLicenseAddress whereHelper__byte
	CreatedAt               whereHelpertime_Time
	UpdatedAt               whereHelpertime_Time
}{
	VehicleTokenID:          whereHelpertypes_Decimal{field: "\"event_vehicles\".\"vehicle_token_id\""},
	EventID:                 whereHelperstring{field: "\"event_vehicles\".\"event_id\""},
	DeveloperLicenseAddress: whereHelper__byte{field: "\"event_vehicles\".\"developer_license_address\""},
	CreatedAt:               whereHelpertime_Time{field: "\"event_vehicles\".\"created_at\""},
	UpdatedAt:               whereHelpertime_Time{field: "\"event_vehicles\".\"updated_at\""},
}

// EventVehicleRels is where relationship names are stored.
var EventVehicleRels = struct {
	Event                                   string
	DeveloperLicenseAddressDeveloperLicense string
}{
	Event:                                   "Event",
	DeveloperLicenseAddressDeveloperLicense: "DeveloperLicenseAddressDeveloperLicense",
}

// eventVehicleR is where relationships are stored.
type eventVehicleR struct {
	Event                                   *Event            `boil:"Event" json:"Event" toml:"Event" yaml:"Event"`
	DeveloperLicenseAddressDeveloperLicense *DeveloperLicense `boil:"DeveloperLicenseAddressDeveloperLicense" json:"DeveloperLicenseAddressDeveloperLicense" toml:"DeveloperLicenseAddressDeveloperLicense" yaml:"DeveloperLicenseAddressDeveloperLicense"`
}

// NewStruct creates a new relationship struct
func (*eventVehicleR) NewStruct() *eventVehicleR {
	return &eventVehicleR{}
}

func (o *EventVehicle) GetEvent() *Event {
	if o == nil {
		return nil
	}

	return o.R.GetEvent()
}

func (r *eventVehicleR) GetEvent() *Event {
	if r == nil {
		return nil
	}

	return r.Event
}

func (o *EventVehicle) GetDeveloperLicenseAddressDeveloperLicense() *DeveloperLicense {
	if o == nil {
		return nil
	}

	return o.R.GetDeveloperLicenseAddressDeveloperLicense()
}

func (r *eventVehicleR) GetDeveloperLicenseAddressDeveloperLicense() *DeveloperLicense {
	if r == nil {
		return nil
	}

	return r.DeveloperLicenseAddressDeveloperLicense
}

// eventVehicleL is where Load methods for each relationship are stored.
type eventVehicleL struct{}

var (
	eventVehicleAllColumns            = []string{"vehicle_token_id", "event_id", "developer_license_address", "created_at", "updated_at"}
	eventVehicleColumnsWithoutDefault = []string{"vehicle_token_id", "event_id", "developer_license_address"}
	eventVehicleColumnsWithDefault    = []string{"created_at", "updated_at"}
	eventVehiclePrimaryKeyColumns     = []string{"vehicle_token_id", "event_id", "developer_license_address"}
	eventVehicleGeneratedColumns      = []string{}
)

type (
	// EventVehicleSlice is an alias for a slice of pointers to EventVehicle.
	// This should almost always be used instead of []EventVehicle.
	EventVehicleSlice []*EventVehicle
	// EventVehicleHook is the signature for custom EventVehicle hook methods
	EventVehicleHook func(context.Context, boil.ContextExecutor, *EventVehicle) error

	eventVehicleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	eventVehicleType                 = reflect.TypeOf(&EventVehicle{})
	eventVehicleMapping              = queries.MakeStructMapping(eventVehicleType)
	eventVehiclePrimaryKeyMapping, _ = queries.BindMapping(eventVehicleType, eventVehicleMapping, eventVehiclePrimaryKeyColumns)
	eventVehicleInsertCacheMut       sync.RWMutex
	eventVehicleInsertCache          = make(map[string]insertCache)
	eventVehicleUpdateCacheMut       sync.RWMutex
	eventVehicleUpdateCache          = make(map[string]updateCache)
	eventVehicleUpsertCacheMut       sync.RWMutex
	eventVehicleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var eventVehicleAfterSelectMu sync.Mutex
var eventVehicleAfterSelectHooks []EventVehicleHook

var eventVehicleBeforeInsertMu sync.Mutex
var eventVehicleBeforeInsertHooks []EventVehicleHook
var eventVehicleAfterInsertMu sync.Mutex
var eventVehicleAfterInsertHooks []EventVehicleHook

var eventVehicleBeforeUpdateMu sync.Mutex
var eventVehicleBeforeUpdateHooks []EventVehicleHook
var eventVehicleAfterUpdateMu sync.Mutex
var eventVehicleAfterUpdateHooks []EventVehicleHook

var eventVehicleBeforeDeleteMu sync.Mutex
var eventVehicleBeforeDeleteHooks []EventVehicleHook
var eventVehicleAfterDeleteMu sync.Mutex
var eventVehicleAfterDeleteHooks []EventVehicleHook

var eventVehicleBeforeUpsertMu sync.Mutex
var eventVehicleBeforeUpsertHooks []EventVehicleHook
var eventVehicleAfterUpsertMu sync.Mutex
var eventVehicleAfterUpsertHooks []EventVehicleHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *EventVehicle) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventVehicleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *EventVehicle) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventVehicleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *EventVehicle) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventVehicleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *EventVehicle) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventVehicleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *EventVehicle) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventVehicleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *EventVehicle) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventVehicleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *EventVehicle) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventVehicleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *EventVehicle) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventVehicleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *EventVehicle) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range eventVehicleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEventVehicleHook registers your hook function for all future operations.
func AddEventVehicleHook(hookPoint boil.HookPoint, eventVehicleHook EventVehicleHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		eventVehicleAfterSelectMu.Lock()
		eventVehicleAfterSelectHooks = append(eventVehicleAfterSelectHooks, eventVehicleHook)
		eventVehicleAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		eventVehicleBeforeInsertMu.Lock()
		eventVehicleBeforeInsertHooks = append(eventVehicleBeforeInsertHooks, eventVehicleHook)
		eventVehicleBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		eventVehicleAfterInsertMu.Lock()
		eventVehicleAfterInsertHooks = append(eventVehicleAfterInsertHooks, eventVehicleHook)
		eventVehicleAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		eventVehicleBeforeUpdateMu.Lock()
		eventVehicleBeforeUpdateHooks = append(eventVehicleBeforeUpdateHooks, eventVehicleHook)
		eventVehicleBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		eventVehicleAfterUpdateMu.Lock()
		eventVehicleAfterUpdateHooks = append(eventVehicleAfterUpdateHooks, eventVehicleHook)
		eventVehicleAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		eventVehicleBeforeDeleteMu.Lock()
		eventVehicleBeforeDeleteHooks = append(eventVehicleBeforeDeleteHooks, eventVehicleHook)
		eventVehicleBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		eventVehicleAfterDeleteMu.Lock()
		eventVehicleAfterDeleteHooks = append(eventVehicleAfterDeleteHooks, eventVehicleHook)
		eventVehicleAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		eventVehicleBeforeUpsertMu.Lock()
		eventVehicleBeforeUpsertHooks = append(eventVehicleBeforeUpsertHooks, eventVehicleHook)
		eventVehicleBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		eventVehicleAfterUpsertMu.Lock()
		eventVehicleAfterUpsertHooks = append(eventVehicleAfterUpsertHooks, eventVehicleHook)
		eventVehicleAfterUpsertMu.Unlock()
	}
}

// One returns a single eventVehicle record from the query.
func (q eventVehicleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EventVehicle, error) {
	o := &EventVehicle{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for event_vehicles")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all EventVehicle records from the query.
func (q eventVehicleQuery) All(ctx context.Context, exec boil.ContextExecutor) (EventVehicleSlice, error) {
	var o []*EventVehicle

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to EventVehicle slice")
	}

	if len(eventVehicleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all EventVehicle records in the query.
func (q eventVehicleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count event_vehicles rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q eventVehicleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if event_vehicles exists")
	}

	return count > 0, nil
}

// Event pointed to by the foreign key.
func (o *EventVehicle) Event(mods ...qm.QueryMod) eventQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.EventID),
	}

	queryMods = append(queryMods, mods...)

	return Events(queryMods...)
}

// DeveloperLicenseAddressDeveloperLicense pointed to by the foreign key.
func (o *EventVehicle) DeveloperLicenseAddressDeveloperLicense(mods ...qm.QueryMod) developerLicenseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"license_address\" = ?", o.DeveloperLicenseAddress),
	}

	queryMods = append(queryMods, mods...)

	return DeveloperLicenses(queryMods...)
}

// LoadEvent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (eventVehicleL) LoadEvent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEventVehicle interface{}, mods queries.Applicator) error {
	var slice []*EventVehicle
	var object *EventVehicle

	if singular {
		var ok bool
		object, ok = maybeEventVehicle.(*EventVehicle)
		if !ok {
			object = new(EventVehicle)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEventVehicle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEventVehicle))
			}
		}
	} else {
		s, ok := maybeEventVehicle.(*[]*EventVehicle)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEventVehicle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEventVehicle))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &eventVehicleR{}
		}
		args[object.EventID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &eventVehicleR{}
			}

			args[obj.EventID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`events`),
		qm.WhereIn(`events.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Event")
	}

	var resultSlice []*Event
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Event")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for events")
	}

	if len(eventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Event = foreign
		if foreign.R == nil {
			foreign.R = &eventR{}
		}
		foreign.R.EventVehicles = append(foreign.R.EventVehicles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EventID == foreign.ID {
				local.R.Event = foreign
				if foreign.R == nil {
					foreign.R = &eventR{}
				}
				foreign.R.EventVehicles = append(foreign.R.EventVehicles, local)
				break
			}
		}
	}

	return nil
}

// LoadDeveloperLicenseAddressDeveloperLicense allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (eventVehicleL) LoadDeveloperLicenseAddressDeveloperLicense(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEventVehicle interface{}, mods queries.Applicator) error {
	var slice []*EventVehicle
	var object *EventVehicle

	if singular {
		var ok bool
		object, ok = maybeEventVehicle.(*EventVehicle)
		if !ok {
			object = new(EventVehicle)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEventVehicle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEventVehicle))
			}
		}
	} else {
		s, ok := maybeEventVehicle.(*[]*EventVehicle)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEventVehicle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEventVehicle))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &eventVehicleR{}
		}
		if !queries.IsNil(object.DeveloperLicenseAddress) {
			args[object.DeveloperLicenseAddress] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &eventVehicleR{}
			}

			if !queries.IsNil(obj.DeveloperLicenseAddress) {
				args[obj.DeveloperLicenseAddress] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`developer_licenses`),
		qm.WhereIn(`developer_licenses.license_address in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DeveloperLicense")
	}

	var resultSlice []*DeveloperLicense
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DeveloperLicense")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for developer_licenses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for developer_licenses")
	}

	if len(developerLicenseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DeveloperLicenseAddressDeveloperLicense = foreign
		if foreign.R == nil {
			foreign.R = &developerLicenseR{}
		}
		foreign.R.DeveloperLicenseAddressEventVehicles = append(foreign.R.DeveloperLicenseAddressEventVehicles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.DeveloperLicenseAddress, foreign.LicenseAddress) {
				local.R.DeveloperLicenseAddressDeveloperLicense = foreign
				if foreign.R == nil {
					foreign.R = &developerLicenseR{}
				}
				foreign.R.DeveloperLicenseAddressEventVehicles = append(foreign.R.DeveloperLicenseAddressEventVehicles, local)
				break
			}
		}
	}

	return nil
}

// SetEvent of the eventVehicle to the related item.
// Sets o.R.Event to related.
// Adds o to related.R.EventVehicles.
func (o *EventVehicle) SetEvent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Event) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"event_vehicles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"event_id"}),
		strmangle.WhereClause("\"", "\"", 2, eventVehiclePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.VehicleTokenID, o.EventID, o.DeveloperLicenseAddress}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EventID = related.ID
	if o.R == nil {
		o.R = &eventVehicleR{
			Event: related,
		}
	} else {
		o.R.Event = related
	}

	if related.R == nil {
		related.R = &eventR{
			EventVehicles: EventVehicleSlice{o},
		}
	} else {
		related.R.EventVehicles = append(related.R.EventVehicles, o)
	}

	return nil
}

// SetDeveloperLicenseAddressDeveloperLicense of the eventVehicle to the related item.
// Sets o.R.DeveloperLicenseAddressDeveloperLicense to related.
// Adds o to related.R.DeveloperLicenseAddressEventVehicles.
func (o *EventVehicle) SetDeveloperLicenseAddressDeveloperLicense(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DeveloperLicense) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"event_vehicles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"developer_license_address"}),
		strmangle.WhereClause("\"", "\"", 2, eventVehiclePrimaryKeyColumns),
	)
	values := []interface{}{related.LicenseAddress, o.VehicleTokenID, o.EventID, o.DeveloperLicenseAddress}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.DeveloperLicenseAddress, related.LicenseAddress)
	if o.R == nil {
		o.R = &eventVehicleR{
			DeveloperLicenseAddressDeveloperLicense: related,
		}
	} else {
		o.R.DeveloperLicenseAddressDeveloperLicense = related
	}

	if related.R == nil {
		related.R = &developerLicenseR{
			DeveloperLicenseAddressEventVehicles: EventVehicleSlice{o},
		}
	} else {
		related.R.DeveloperLicenseAddressEventVehicles = append(related.R.DeveloperLicenseAddressEventVehicles, o)
	}

	return nil
}

// EventVehicles retrieves all the records using an executor.
func EventVehicles(mods ...qm.QueryMod) eventVehicleQuery {
	mods = append(mods, qm.From("\"event_vehicles\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"event_vehicles\".*"})
	}

	return eventVehicleQuery{q}
}

// FindEventVehicle retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEventVehicle(ctx context.Context, exec boil.ContextExecutor, vehicleTokenID types.Decimal, eventID string, developerLicenseAddress []byte, selectCols ...string) (*EventVehicle, error) {
	eventVehicleObj := &EventVehicle{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"event_vehicles\" where \"vehicle_token_id\"=$1 AND \"event_id\"=$2 AND \"developer_license_address\"=$3", sel,
	)

	q := queries.Raw(query, vehicleTokenID, eventID, developerLicenseAddress)

	err := q.Bind(ctx, exec, eventVehicleObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from event_vehicles")
	}

	if err = eventVehicleObj.doAfterSelectHooks(ctx, exec); err != nil {
		return eventVehicleObj, err
	}

	return eventVehicleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *EventVehicle) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no event_vehicles provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(eventVehicleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	eventVehicleInsertCacheMut.RLock()
	cache, cached := eventVehicleInsertCache[key]
	eventVehicleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			eventVehicleAllColumns,
			eventVehicleColumnsWithDefault,
			eventVehicleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(eventVehicleType, eventVehicleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(eventVehicleType, eventVehicleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"event_vehicles\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"event_vehicles\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into event_vehicles")
	}

	if !cached {
		eventVehicleInsertCacheMut.Lock()
		eventVehicleInsertCache[key] = cache
		eventVehicleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the EventVehicle.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *EventVehicle) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	eventVehicleUpdateCacheMut.RLock()
	cache, cached := eventVehicleUpdateCache[key]
	eventVehicleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			eventVehicleAllColumns,
			eventVehiclePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update event_vehicles, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"event_vehicles\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, eventVehiclePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(eventVehicleType, eventVehicleMapping, append(wl, eventVehiclePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update event_vehicles row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for event_vehicles")
	}

	if !cached {
		eventVehicleUpdateCacheMut.Lock()
		eventVehicleUpdateCache[key] = cache
		eventVehicleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q eventVehicleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for event_vehicles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for event_vehicles")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EventVehicleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventVehiclePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"event_vehicles\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, eventVehiclePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in eventVehicle slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all eventVehicle")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *EventVehicle) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no event_vehicles provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(eventVehicleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	eventVehicleUpsertCacheMut.RLock()
	cache, cached := eventVehicleUpsertCache[key]
	eventVehicleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			eventVehicleAllColumns,
			eventVehicleColumnsWithDefault,
			eventVehicleColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			eventVehicleAllColumns,
			eventVehiclePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert event_vehicles, could not build update column list")
		}

		ret := strmangle.SetComplement(eventVehicleAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(eventVehiclePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert event_vehicles, could not build conflict column list")
			}

			conflict = make([]string, len(eventVehiclePrimaryKeyColumns))
			copy(conflict, eventVehiclePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"event_vehicles\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(eventVehicleType, eventVehicleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(eventVehicleType, eventVehicleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert event_vehicles")
	}

	if !cached {
		eventVehicleUpsertCacheMut.Lock()
		eventVehicleUpsertCache[key] = cache
		eventVehicleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single EventVehicle record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EventVehicle) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no EventVehicle provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), eventVehiclePrimaryKeyMapping)
	sql := "DELETE FROM \"event_vehicles\" WHERE \"vehicle_token_id\"=$1 AND \"event_id\"=$2 AND \"developer_license_address\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from event_vehicles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for event_vehicles")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q eventVehicleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no eventVehicleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from event_vehicles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for event_vehicles")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EventVehicleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(eventVehicleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventVehiclePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"event_vehicles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, eventVehiclePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from eventVehicle slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for event_vehicles")
	}

	if len(eventVehicleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EventVehicle) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEventVehicle(ctx, exec, o.VehicleTokenID, o.EventID, o.DeveloperLicenseAddress)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EventVehicleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EventVehicleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventVehiclePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"event_vehicles\".* FROM \"event_vehicles\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, eventVehiclePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EventVehicleSlice")
	}

	*o = slice

	return nil
}

// EventVehicleExists checks if the EventVehicle row exists.
func EventVehicleExists(ctx context.Context, exec boil.ContextExecutor, vehicleTokenID types.Decimal, eventID string, developerLicenseAddress []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"event_vehicles\" where \"vehicle_token_id\"=$1 AND \"event_id\"=$2 AND \"developer_license_address\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, vehicleTokenID, eventID, developerLicenseAddress)
	}
	row := exec.QueryRowContext(ctx, sql, vehicleTokenID, eventID, developerLicenseAddress)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if event_vehicles exists")
	}

	return exists, nil
}

// Exists checks if the EventVehicle row exists.
func (o *EventVehicle) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return EventVehicleExists(ctx, exec, o.VehicleTokenID, o.EventID, o.DeveloperLicenseAddress)
}
